<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vuejs-1]]></title>
    <url>%2F2018%2F04%2F07%2Fvuejs-1%2F</url>
    <content type="text"><![CDATA[前言vue借鉴angular指令和react组件化 后端用vue-resource实现，前端用vue-router实现 可以使用vue.js完整开发移动app（组件化，模块化） vue-cli 脚手架 vue-resource Ajax通信 webpack 构建工具 es6 + eslint eslint是es6代码风格的检查工具（很严格） 从传统后台MVC向REST API + 前端MV*迁移 MVVM框架 （Angular react vue） View （视图，DOM） ViewModel（通讯， 观察者） Model（数据， JavaScript） 想回到以前版本的vue.js，可以用vue init webpack#1.0 xxxx .eslintrc.js 1234//有分号配置'semi':['error','always'],//设置缩进'indent': 0 npm install stylus –save-dev npm install stylus-loader –save-dev “vue-router”:”^0.7.13” main.js12345678910111213141516171819202122232425262728293031323334import Vue from 'vue';import VueRouter from 'vue-router';import App from './App';import goods from 'components/goods/goods';import ratings from 'components/ratings/ratings';import seller from 'components/seller/seller';// 加载公共样式import 'common/stylus/index.styl';Vue.use(VueRouter);let app = Vue.extend(App);let router = new VueRouter(&#123; linkActiveClass: 'active'&#125;);router.map(&#123; '/goods': &#123; component: goods &#125;, '/ratings': &#123; component: ratings &#125;, 'seller': &#123; component: seller &#125;&#125;);// 挂载点router.start(app, '#app');router.go('/goods'); 设置页面路由dev-server.js 12345678910111213141516171819202122232425262728293031var app = express()var appData = require('../data.json');var seller = appData.seller;var goods = appData.goods;var ratings = appData.ratings;var apiRoutes = express.Router();apiRoutes.get('/seller', function (req, res) &#123; res.json(&#123; errno: 0, data: seller &#125;)&#125;);apiRoutes.get('/goods', function (req, res) &#123; res.json(&#123; errno: 0, data: goods &#125;)&#125;);apiRoutes.get('/ratings', function (req, res) &#123; res.json(&#123; errno: 0, data: ratings &#125;)&#125;);app.use('/api', apiRoutes); App.vue1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;template&gt; &lt;div&gt; &lt;v-header&gt;&lt;/v-header&gt; &lt;div class="tab border-1px"&gt; &lt;div class="tab-item"&gt; &lt;a v-link="&#123;path:'/goods'&#125;"&gt;商品&lt;/a&gt; &lt;/div&gt; &lt;div class="tab-item"&gt; &lt;a v-link="&#123;path:'/ratings'&#125;"&gt;评论&lt;/a&gt; &lt;/div&gt; &lt;div class="tab-item"&gt; &lt;a v-link="&#123;path:'/seller'&#125;"&gt;商家&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="content"&gt; I am content! &lt;/div&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import header from './components/header/header.vue'; export default &#123; components: &#123; 'v-header': header &#125; &#125;;&lt;/script&gt;&lt;style type="text/stylus" lang="stylus" rel="stylesheet/stylus"&gt; @import "./common/stylus/mixin.styl" .tab display: flex width: 100% height: 40px line-height: 40px // border-bottom: 1px solid rgba(7, 17, 27, 0.1) border-1px(rgba(7, 17, 27, 0.1)) .tab-item flex: 1 text-align: center &amp;&gt;a display: block font-size: 14px color: rgb(77, 85, 93) &amp;.active color: rgb(240, 20, 20)&lt;/style&gt; goods.vue 1234567891011&lt;template&gt; &lt;div&gt;I am goods&lt;/div&gt;&lt;/template&gt;&lt;script type="text/ecmascript-6"&gt; export default &#123;&#125;;&lt;/script&gt;&lt;style lang="stylus" rel="stylesheet/stylus"&gt;&lt;/style&gt; stylusbase.styl 1234567891011@media (-webkit-min-device-pixel-ratio: 1.5),(min-device-pixel-ratio: 1.5) .border-1px &amp;::after -webkit-transform : scaleY(0.7) transform: scaleY(0.7)@media (-webkit-min-device-pixel-ratio: 2),(min-device-pixel-ratio: 1.5) .border-1px &amp;::after -webkit-transform : scaleY(0.5) transform: scaleY(0.5) index.styl 123@import "./mixin"@import "./icon"@import "./base" mixin.styl 12345678910border-1px($color) position : relative &amp;:after display : block position : absolute left : 0 bottom : 0 width : 100% border-top : 1px solid $color content : '']]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tip1]]></title>
    <url>%2F2018%2F03%2F29%2FTip1%2F</url>
    <content type="text"><![CDATA[如何修改系统默认的下载地址 打开注册表编辑器，方法是：运行 -&gt; 输入regedit 找到注册表项HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion 在右侧你可以找到数值名称为ProgramFilesDir的项目，里面的默认数值数据为“C:\Program Files”，将这个值修改为你所需要设定的路径，比如“D:\software”，然后确定，推出注册表编辑器。 再次安装其他软件的时候，软件默认安装路径就会变成“D:\software”了！]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>Tip</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Page rendering]]></title>
    <url>%2F2018%2F03%2F26%2FPage-rendering%2F</url>
    <content type="text"><![CDATA[前台页面渲染目录结构 public js views bonusType list ListItemView.js ListView.js CreateView.js TopBarView.js router.js templates bonusType list listHeader.html listTemplate.html cancelEdit.html createTemplate.html topBarTemplate.html 分析图画的比较烂╮(~﹏~)╭ 调用顺序index.html 加载/js/main.js 加载/js/app.js 加载/js/router.js（这里加载了很多重要的文件) router.js得到路由 ‘easyErp/:contentType/list(/pId=:parrentContentId)(/p=:page)(/c=:countPerPage)(/filter=:filter)’: ‘goToList’ 调用方法goToList goToList: function (contentType, parrentContentId, page, countPerPage, filter) 调用方法goList function goList(context) contentViewUrl = ‘views/‘ + contentType + ‘/list/ListView’; topBarViewUrl = ‘views/‘ + contentType + ‘/TopBarView’; 解析TopBarView(view/:contentType/TopBarView) 12345var TopBarView = BaseView.extend(&#123; el : &apos;#top-bar&apos;, contentType: CONSTANTS.WORKPOINT, template: _.template(ContentTopBarTemplate)&#125;); 渲染页面templates/workPoint/TopBarTemplate.html(这里是以workPoint为例) 解析ListView（view/:contentType/list/ListView） 渲染页面templates/workPoint/list/ListHeader.html 加载文件views/workPoint/list/ListItemView,views/workPoint/CreateView,views/workPoint/EditView (这里是以workPoint为例)]]></content>
      <categories>
        <category>MEAN</category>
      </categories>
      <tags>
        <tag>MEAN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB 聚合分析]]></title>
    <url>%2F2018%2F03%2F25%2FMongoDB-%E8%81%9A%E5%90%88%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[1234今天看了关于mongodb的聚合方面，这时所做出的总结。聚合操作能够处理数据记录并且返回计算结果。聚合操作能够将多个文档中的值组合起来，对成组数据执行各种操作，返回单一的结果。它相当于SQL中的count（*）组合group by aggregate()方法对于MongoDB中的聚合操作，应该使用aggregate()方法 1、聚合表达式12345678910语法为:db.collection.aggregate(pipeline, options)具体应用举例为：db.demo.aggregate([&#123;$group:&#123;_id:&quot;$&lt;key&gt;&quot;,num_movie:&#123;$sum:2&#125;&#125;&#125;])$&lt;key&gt;代表用来分组的key，num_movie为新生成的key，步长为2(key值若为value，成组个数为n)则返回文档类型为&#123; &lt;key&gt; : value, num_movie : 2*n&#125; 表达式 描述 $sum 对集合所有文档的定义值进行加和操作 $avg 对集合中所有文档的定义值进行平均值 $min 计算集合中所有文档的对应值中的最小值 $max 计算集合中所有文档的对应值中的最大值 $push 将值插入到一个结果文档的数组中 $addToSet 将值插入到一个结果文档的数组中，但不进行复制 $first 根据成组方式，从源文档中获取第一个文档。但只有对之前应用过 $sort 管道操作符的结果才有意义。 $last 根据成组方式，从源文档中获取最后一个文档。但只有对之前进行过 $sort 管道操作符的结果才有意义。 2、管道的概念1管道（pipeline）概念指能够在一些输入上执行一个操作，操作结束的返db回结果能用作下一个命令的输入。 MongoDB的聚合架构中能够采取的管道操作符有： $project 用来选取集合中一些特定字段。 $match 过滤操作。减少用作下一阶段输入的文档的数量。 $group 如上所述，执行真正的聚合操作。 $sort 对文档进行排序。 $skip 在一组文档中，跳过指定数量的文档。 $limit 将查看文档的数目限制为从当前位置处开始的指定数目。 $unwind 解开使用数组的文档。当使用数组时，数据处于预连接状态，通过该操作，数据重新回归为各个单独的文档的状态。 3、聚合中的游标1db.collection.aggregate()方法可以返回一个指针（cursor），数据放在内存中，直接操作。跟Mongo shell 一样指针操作。]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[后端模块加载梳理]]></title>
    <url>%2F2018%2F03%2F24%2F%E5%90%8E%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%A2%B3%E7%90%86%2F</url>
    <content type="text"><![CDATA[1、首先项目启动node server.js 加载config中的环境配置 创建mongodb数据库的连接 加载了./models/index.js加载了所有数据库中的文档类型，并添加到mongoose.Schema dbsObject ==&gt; 存储数据库对象，key==db.name; value==dbObject ==&gt;该对象保存到mainDb dbsNames ==&gt; 存储所有的{dbname，url} 加载了./app并传入参数mainDb和dbsNames 2、[./app] 设置session，允许跨域请求，判断手机端，设置目录，后缀等一系列默认要求加载的事件 创建一个http服务器 加载 ./routes/index 并传入参数app， mainDb 3、[./routes/index]在该文件中赋值了所有需要调用的参数 app 设置的所有的关于app默认路径以及默认检测mainDb 把所有的DB的类型都包含在这里dbsNames 把所有的{db.name，db.url}都放在这里dbsObject 把所有的dbsobject[dbname]=dbobject中的所有集合类型都存在这里了event 加载所有的响应事件用这些参数来加载所有的功能模块的Router 设置了app.use(功能模块下url根目录，功能模块路由) 设置了一些必要的路由，如登出等 对于错误页面和无法找到页面的回调函数 4、对某一功能模块进行分析此处仅以app.use(‘/workPoint’, workPointRouter)为例 workPointRouter = require(‘./workPoint’)(models, event); 加载’../handlers/workPoint’ 加载所有的关于workPoint的回调函数，包含增删改（查） 加载’../helpers/checkAuth’ 用来进行权限检测 定义所有的类似于restful的路由（url，handler.function）]]></content>
      <categories>
        <category>MEAN</category>
      </categories>
      <tags>
        <tag>MEAN</tag>
      </tags>
  </entry>
</search>
